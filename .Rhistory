cor_matrix <- cor(salary[, c("NewDeanHire", "degree", "sex", "year", "ysdeg")])
# Create the binary variable
salary$NewDeanHire <- ifelse((salary$ysdeg) <= 15, 1, 0)
# Check correlation between 'new_dean' and 'ysdeg'
correlation_result <- cor.test(salary$new_dean, salary$ysdeg)
salary$new_dean <- ifelse(salary$ysdeg <= 15, 1, 0)
cor.test(salary$new_dean, salary$ysdeg)
# Create the binary variable
salary$NewDeanHire <- ifelse((salary$ysdeg) <= 15, 1, 0)
# Check correlation between 'new_dean' and 'ysdeg'
correlation_result <- cor.test(salary$NewDeanHire, salary$ysdeg)
print(correlation_result)
model_excluding_ysdeg <- lm(salary ~ . - ysdeg, data = salary)
model_including_ysdeg <- lm(salary ~ ., data = salary)
model_excluding_ysdeg <- lm(salary ~ . - ysdeg, data = salary)
model_including_ysdeg <- lm(salary ~ ., data = salary)
# Summary for model excluding 'ysdeg'
summary(model_excluding_ysdeg)
# Summary for model including 'ysdeg'
summary(model_including_ysdeg)
#load data
data(salary)
data("house.selling.price")
library(tidyverse)
library(alr4)
library(smss)
library(ggplot2)
library(stargazer)
library(RColorBrewer)
#load data
data(salary)
data("house.selling.price")
# Given values
x1 <- 1240
x2 <- 18000
intercept <- -10536
coef_x1 <- 53.8
coef_x2 <- 2.84
actual_selling_price <- 145000
# Calculate predicted selling price
predicted_selling_price <- intercept + coef_x1 * x1 + coef_x2 * x2
# Calculate residual
residual <- actual_selling_price - predicted_selling_price
# Print the results
cat("Predicted Selling Price:", predicted_selling_price, "\n")
cat("Residual:", residual, "\n")
equivalent_lot_size_increase <- coef_x1 / coef_x2
# Print the result
cat("Equivalent increase in lot size:", equivalent_lot_size_increase, "square feet\n")
#salaries for men and women
salary_men <- salary$salary[salary$sex == "Male"]
salary_women <- salary$salary[salary$sex == "Female"]
# Perform a two-sample t-test
t_test_result <- t.test(salary_men, salary_women)
# Print the result
print(t_test_result)
# Run multiple linear regression
model <- lm(salary ~ degree + rank + sex + year + ysdeg, data = salary)
# Obtain 95% confidence interval for the difference in salary between males and females
conf_interval <- confint(model, "sexFemale", level = 0.95)
# Print the result
print(conf_interval)
summary(model)
# Change the baseline category for the rank variable to "Assistant Professor"
salary$rank <- relevel(salary$rank, ref = "Asst")
# Run multiple linear regression
model_with_new_baseline <- lm(salary ~ degree + rank + sex + year + ysdeg, data = salary)
# Display coefficients
summary(model_with_new_baseline)
#excluding "rank"
model_without_rank <- lm(salary ~ degree + sex + year + ysdeg, data = salary)
# Display coefficients
summary(model_without_rank)
# Create the binary variable
salary$NewDeanHire <- ifelse((salary$ysdeg) <= 15, 1, 0)
# Check correlation between 'new_dean' and 'ysdeg'
correlation_result <- cor.test(salary$NewDeanHire, salary$ysdeg)
print(correlation_result)
model_excluding_ysdeg <- lm(salary ~ . - ysdeg, data = salary)
model_including_ysdeg <- lm(salary ~ ., data = salary)
# Summary for model excluding 'ysdeg'
summary(model_excluding_ysdeg)
# Summary for model including 'ysdeg'
summary(model_including_ysdeg)
# Run the regression model
selling_price_model <- lm(selling_price ~ size_of_home + is_new, data = house.selling.price)
# Run the regression model
selling_price_model <- lm(Price ~ Size + New, data = house.selling.price)
# Print the summary of the regression results
summary(selling_price_model)
# Coefficients from the regression
intercept <- -40230.867
coef_size <- 116.132
coef_new <- 57736.283
# Size of the home
size <- 3000
# Predicted selling price for a new home
predicted_price_new <- intercept + coef_size * size + coef_new * 1
# Predicted selling price for a not new home
predicted_price_not_new <- intercept + coef_size * size + coef_new * 0
# Display the results
cat("Predicted selling price for a new home:", predicted_price_new, "\n")
cat("Predicted selling price for a not new home:", predicted_price_not_new, "\n")
# Create a data frame with the predictor variables
new_data <- data.frame(Size = 3000, New = c(1, 0))
# Predict the selling prices using the model
predicted_prices <- predict(selling_price_model, newdata = new_data)
# Display the results
cat("Predicted selling price for a new home:", predicted_prices[1], "\n")
cat("Predicted selling price for a not new home:", predicted_prices[2], "\n")
fit_interaction <- lm(Price ~ Size * New, data = house.selling.price)
# Display regression results
summary(fit_interaction)
# Predicting the selling prices
predicted_prices <- predict(fit_interaction, newdata = new_data)
# Displaying the predicted prices
predicted_prices
# Creating a data frame with the specific values
new_data_1500 <- data.frame(Size = 1500, New = c(1, 0))
# Predicting the selling prices
predicted_prices_1500 <- predict(fit_interaction, newdata = new_data_1500)
# Displaying the predicted prices
predicted_prices_1500
# Calculating the differences
price_difference <- predicted_prices - predicted_prices_1500
# Displaying the differences
price_difference
# Creating a data frame with the specific values
new_data_1500 <- data.frame(Size = 1500, New = c(1, 0))
# Predicting the selling prices
predicted_prices_1500 <- predict(fit_interaction, newdata = new_data_1500)
# Displaying the predicted prices for 1500 sq ft and 3000 sq ft
predicted_prices
predicted_prices_1500
# Calculating the differences
price_difference <- predicted_prices - predicted_prices_1500
# Displaying the differences
price_difference
# Creating a data frame with the specific values
new_data_1500 <- data.frame(Size = 1500, New = c(1, 0))
# Predicting the selling prices
predicted_prices_1500 <- predict(fit_interaction, newdata = new_data_1500)
# Displaying the predicted prices for 1500 sq ft and 3000 sq ft
predicted_prices
predicted_prices_1500
# Calculating the differences
price_difference <- predicted_prices - predicted_prices_1500
# Displaying the differences
price_difference
# Displaying the differences
price_difference
# Calculating the differences
price_difference <- predicted_prices - predicted_prices_1500
# Calculating the differences
price_difference <- predicted_prices - predicted_prices_1500
# Displaying the differences
price_difference
#load data
data("house.selling.price.2")
library(tidyverse)
library(alr4)
library(smss)
library(ggplot2)
library(stargazer)
library(RColorBrewer)
#load data
data("house.selling.price.2")
#fit all
model_all <- lm(Price ~ ., data = house)
View(house.selling.price.2)
#fit all
model_all <- lm(Price ~ ., data = house.selling.price.2)
#fit all
model_all <- lm(P ~ ., data = house.selling.price.2)
# Fit the model without Beds
model_no_beds <- lm(P ~ . - Be, data = house)
#fit all
model_all <- lm(P ~ ., data = house.selling.price.2)
# Fit the model without Beds
model_no_beds <- lm(P ~ . - Be, data = house.selling.price.2)
# Extracting metrics for the all model
rsq_all <- summary(model_all)$r.squared
adj_rsq_all <- summary(model_all)$adj.r.squared
PRESS_all <- sum((residuals(model_all) / (1 - lm.influence(model_all)$hat))^2)
AIC_all <- AIC(model_all)
BIC_all <- BIC(model_all)
# Extracting metrics for the model without Beds
rsq_nobeds <- summary(model_no_beds)$r.squared
adj_rsq_nobeds <- summary(model_no_beds)$adj.r.squared
PRESS_nobeds <- sum((residuals(model_no_beds) / (1 - lm.influence(model_no_beds)$hat))^2)
AIC_nobeds <- AIC(model_no_beds)
BIC_nobeds <- BIC(model_no_beds)
# Create a data frame to display the results
result_df <- data.frame(
models = c('model_all', 'model_no_beds'),
rsq = c(rsq_all, rsq_nobeds),
adj.rsq = c(adj_rsq_all, adj_rsq_nobeds),
PRESS = c(PRESS_all, PRESS_nobeds),
AIC = c(AIC_all, AIC_nobeds),
BIC = c(BIC_all, BIC_nobeds)
)
# Print the results
print(result_df)
View(result_df)
results_df
result_df
#load data
data("house.selling.price.2")
data(trees)
# Fit a multiple regression model
model_volume <- lm(Volume ~ Girth + Height, data = trees)
# Display the summary of the model
summary(model_volume)
# Run regression diagnostic plots
par(mfrow = c(2, 2))
plot(model_volume)
# Run regression diagnostic plots
par(mfrow = c(2, 2))
plot(model_volume)
# Reset the plotting layout
par(mfrow = c(1, 1))
View(model_volume)
# Run regression diagnostic plots
par(mfrow = c(2, 3))
plot(model_volume, which = 1:6)
# Reset the plotting layout
par(mfrow = c(1, 1))
# Fit a model with a quadratic term
model_quadratic <- lm(Volume ~ Girth + Height + I(Girth^2), data = trees)
summary(model_quadratic)
plot(model_quadratic, which = 1)
model_election <- lm(Buchanan ~ Bush, data = your_data)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 1:6)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 1:4)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 2))
plot(model_election)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 2))
plot(model_election)
# Reset the plotting layout
par(mfrow = c(1, 1))
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 6)
# Reset the plotting layout
par(mfrow = c(1, 1))
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 1:6)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 6)
model_election <- lm(Buchanan ~ Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election, which = 1:6)
# Take the log of both variables
florida$log_Bush <- log(florida$Bush)
florida$log_Buchanan <- log(florida$Buchanan)
# Run the regression model with log-transformed variables
model_election_log <- lm(log_Buchanan ~ log_Bush, data = florida)
# Plot diagnostic plots
par(mfrow = c(2, 3))
plot(model_election_log, which = 1:6)
punif(17, min = 0, max = 25) - punif(13, min = 0, max = 25)
set.seed(123)  # For reproducibility
y.1000 <- runif(1000, min = 0, max = 25)
prop_in_interval <- mean(y.1000 >= 13 & y.1000 <= 17)
prop_in_interval
mean(y.1000)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readr)
# Load the Spotify dataset from GitHub
spotify_data <- read_csv("https://github.com/Mikay711/SpotifyDataCleaning/raw/main/DataCleanAndFormatted/Spotify_Cleaned.csv")
# Load Spotify data from Deliverable 3 GitHub repository
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Spotify_Cleaned.csv")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://github.com/Mikay711/DPP_Deliv3/blob/1375cd19b07b467a4f2ea217f312419e9f330b68/DataCleanedDeliv3/Hot100_2023.csv")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Hot100_2023.csv")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/DataCleanedDeliv3/Hot100_2023.csv
")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/DataCleanedDeliv3/Hot100_2023.csv")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv(url("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/DataCleanedDeliv3/Hot100_2023.csv"))
library(readr)
library(dplyr)
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Hot100_2023.csv)
# Load Spotify data from Deliverable 3 GitHub repository
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Spotify_Cleaned.csv")
# Load Spotify data from Deliverable 3 GitHub repository
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Spotify_Cleaned.csv")
# Load Spotify data from Deliverable 3 GitHub repository
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Spotify_Cleaned.csv")
# Load libraries
library(readr)
library(dplyr)
# Load Spotify data from Deliverable 3 GitHub repository
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Spotify_Cleaned.csv")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Hot100_2023.csv)
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Hot100_2023.csv")
# Load Spotify data from Deliverable 3 GitHub repository
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Spotify_Cleaned.csv")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Hot100_2023.csv")
# Load Hot100 data from Deliverable 3 GitHub repository
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/DataCleanedDeliv3/Hot100_2023.csv")
# Read Spotify data from GitHub
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/DataCleanedDeliv3/Spotify_Cleaned.csv")
# Load libraries
library(readr)
library(dplyr)
# Read Hot100 data from GitHub
hot100_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/Hot100_2023_Cleaned.csv")
# Read Hot100 data from GitHub
hot100_data <- read_csv("https://github.com/Mikay711/DPP_Deliv3/raw/main/Hot100_2023_Cleaned.csv")
detach("package:readr", unload = TRUE)
library(readr)
# Load libraries
library(readr)
library(dplyr)
# Read Hot100 data from GitHub
hot100_data <- read_csv("https://github.com/Mikay711/DPP_Deliv3/blob/main/Hot100_2023_Cleaned.csv")
setwd("~/Graduate School/DACSS 690R/DPP_Deliv3")
# Read Hot100 data from GitHub
hot100_data <- read_csv("https://github.com/Mikay711/DPP_Deliv3/blob/main/Hot100_2023_Cleaned.csv")
# Read the Spotify data
spotify_data <- read_csv("Spotify_Cleaned.csv")
# Read the Hot100 data
hot100_data <- read_csv("Hot100_2023.csv")
# Read the Spotify data
spotify_data <- read_csv("Spotify_Cleaned.csv")
# Read the Hot100 data
hot100_data <- read_csv("Hot100_2023_Cleaned.csv")
# Preview the data
head(spotify_data)
head(hot100_data)
View(hot100_data)
View(spotify_data)
knitr::opts_chunk$set(echo = TRUE)
# Read Spotify data directly from GitHub
spotify_data <- read_csv("https://github.com/Mikay711/SpotifyDataCleaning/raw/main/Spotify%20Most%20Streamed%20Songs.csv")
# Rescale percentage attributes in Spotify data to 0–1
spotify_data <- spotify_data %>%
mutate(
danceability_scaled = danceability_% / 100,
# Rescale percentage attributes in Spotify data to 0–1
spotify_data <- spotify_data %>%
mutate(
danceability_scaled = `danceability_%` / 100,
valence_scaled = `valence_%` / 100,
energy_scaled = `energy_%` / 100,
acousticness_scaled = `acousticness_%` / 100,
instrumentalness_scaled = `instrumentalness_%` / 100,
liveness_scaled = `liveness_%` / 100,
speechiness_scaled = `speechiness_%` / 100
)
# Preview the scaled data
head(spotify_data)
# Spotify: Categorize 'streams' into "low", "medium", "high"
spotify_data <- spotify_data %>%
mutate(
stream_category = case_when(
streams < 500000000 ~ "low",
streams < 1000000000 ~ "medium",
TRUE ~ "high"
)
)
# Hot100: Categorize 'Rank' into "Top 10", "Top 50", "Top 100"
hot100_data <- hot100_data %>%
mutate(
rank_category = case_when(
Rank <= 10 ~ "Top 10",
Rank <= 50 ~ "Top 50",
TRUE ~ "Top 100"
)
)
# Hot100: Group 'Weeks in Charts' into ranges
hot100_data <- hot100_data %>%
mutate(
weeks_category = case_when(
as.numeric(`Weeks in Charts`) <= 10 ~ "1-10",
as.numeric(`Weeks in Charts`) <= 20 ~ "11-20",
as.numeric(`Weeks in Charts`) <= 30 ~ "21-30",
TRUE ~ "31+"
)
)
unique(hot100_data$`Weeks in Charts`)
hot100_data <- hot100_data %>%
mutate(`Weeks in Charts` = ifelse(`Weeks in Charts` == "-", NA, `Weeks in Charts`))
hot100_data <- hot100_data %>%
mutate(`Weeks in Charts` = as.numeric(`Weeks in Charts`))
# Hot100: Categorize 'Rank' into "Top 10", "Top 50", "Top 100"
hot100_data <- hot100_data %>%
mutate(
rank_category = case_when(
Rank <= 10 ~ "Top 10",
Rank <= 50 ~ "Top 50",
TRUE ~ "Top 100"
)
)
# Hot100: Group 'Weeks in Charts' into ranges
hot100_data <- hot100_data %>%
mutate(
weeks_category = case_when(
as.numeric(`Weeks in Charts`) <= 10 ~ "1-10",
as.numeric(`Weeks in Charts`) <= 20 ~ "11-20",
as.numeric(`Weeks in Charts`) <= 30 ~ "21-30",
TRUE ~ "31+"
)
)
unique(hot100_data$weeks_category)
# Read Spotify data from GitHub
spotify_data <- read_csv("https://github.com/Mikay711/DPP_Deliv3/raw/main/Spotify_Cleaned.csv")
write_csv(spotify_data, "Spotify_Rescaled.csv")
write_csv(hot100_data, "Hot100_Rescaled.csv")
# Rescale percentage attributes in Spotify data to 0–1
spotify_data <- spotify_data %>%
mutate(
danceability_scaled = `danceability_%` / 100,
valence_scaled = `valence_%` / 100,
energy_scaled = `energy_%` / 100,
acousticness_scaled = `acousticness_%` / 100,
instrumentalness_scaled = `instrumentalness_%` / 100,
liveness_scaled = `liveness_%` / 100,
speechiness_scaled = `speechiness_%` / 100
)
# Spotify: Categorize 'streams' into "low", "medium", "high"
spotify_data <- spotify_data %>%
mutate(
stream_category = case_when(
streams < 500000000 ~ "low",
streams < 1000000000 ~ "medium",
TRUE ~ "high"
)
)
head(spotify_data)
hot100_data <- hot100_data %>%
mutate(`Weeks in Charts` = ifelse(`Weeks in Charts` == "-", NA, `Weeks in Charts`))
hot100_data <- hot100_data %>%
mutate(`Weeks in Charts` = as.numeric(`Weeks in Charts`))
# Hot100: Categorize 'Rank' into "Top 10", "Top 50", "Top 100"
hot100_data <- hot100_data %>%
mutate(
rank_category = case_when(
Rank <= 10 ~ "Top 10",
Rank <= 50 ~ "Top 50",
TRUE ~ "Top 100"
)
)
# Hot100: Group 'Weeks in Charts' into ranges
hot100_data <- hot100_data %>%
mutate(
weeks_category = case_when(
as.numeric(`Weeks in Charts`) <= 10 ~ "1-10",
as.numeric(`Weeks in Charts`) <= 20 ~ "11-20",
as.numeric(`Weeks in Charts`) <= 30 ~ "21-30",
TRUE ~ "31+"
)
)
head(hot100_data)
write_csv(spotify_data, "Spotify_Rescaled.csv")
write_csv(hot100_data, "Hot100_Rescaled.csv")
write_csv(spotify_data, "DataProcessed/Spotify_Rescaled.csv")
write_csv(spotify_data, "Processed Data/Spotify_Rescaled.csv")
write_csv(hot100_data, "Processed Data/Hot100_Rescaled.csv")
# Test connection to Spotify data
test_spotify <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/Spotify_Cleaned.csv")
head(test_spotify)
# Test connection to Hot100 data
test_hot100 <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/Hot100_2023_Cleaned.csv")
head(test_hot100)
# Load Spotify data from GitHub
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/Spotify_Cleaned.csv")
# Load Spotify data from GitHub
spotify_data <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/Spotify_Cleaned.csv")
# Load Hot100 data from GitHub
hot100_data <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/Hot100_2023_Cleaned.csv")
# Load Spotify data from GitHub
spotify_data <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/main/Spotify_Cleaned.csv")
View(spotify_data)
# Load Spotify data from GitHub
spotify_data <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/Spotify_Cleaned.csv")
View(spotify_data)
# Load Spotify data from GitHub
spotify_data <- read_csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/Spotify_Cleaned.csv")
# Load Spotify data from GitHub
spotify_data <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/Spotify_Cleaned.csv")
View(spotify_data)
# Load Hot100 data from GitHub
hot100_data <- read.csv("https://raw.githubusercontent.com/Mikay711/DPP_Deliv3/refs/heads/main/Hot100_2023_Cleaned.csv")
View(hot100_data)
install.packages("readr")
library(readr)
